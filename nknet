#!/usr/bin/python3

import re
import json
import time
import getpass
import pathlib
import urllib3
import argparse
import colorama
import requests
import urllib.parse

from typing import Callable

__version__ = '2.1.0'

BASE_URL = 'netauth.nankai.edu.cn'
BASE_PORT = 804
URL_ROOT = f'https://{BASE_URL}:{BASE_PORT}/eportal/portal/'
TIMEOUT = 3
LOGIN_CALLBACK = 'dr1001'
USERNAME_PREFIX = ',`,'
DEFAULT_ENCODE_KEY = 'drcom'


def connectivity_check(
        success: Callable,
        error: Callable,
        timeout: int = TIMEOUT,
        msg: str | None = None,
):
    try:
        requests.head('https://www.baidu.com/', timeout=timeout)
        if success is not None:
            return success(msg)
    except (requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError):
        if error is not None:
            return error(msg)


def compute_key(key: str) -> int:
    computed_key = 0
    for char in key:
        computed_key ^= ord(char)
    return computed_key


def encode_string(string: str, key: str = DEFAULT_ENCODE_KEY) -> str:
    if not string:
        return ''
    if len(string) > 512:
        return '-1'
    output = ''
    computed_key = compute_key(key)
    for char in string:
        ch = ord(char) ^ computed_key
        str_hex = format(ch, '02x')
        output += str_hex
    return output


def decode_string(encoded: str, key: str = DEFAULT_ENCODE_KEY):
    if not encoded:
        return ''
    if len(encoded) % 2 != 0:
        raise ValueError('Encoded string must have an even length.')
    decoded = ''
    computed_key = compute_key(key)
    for i in range(0, len(encoded), 2):
        hex_pair = encoded[i:i + 2]
        ch = int(hex_pair, 16)
        original_ch = ch ^ computed_key
        decoded += chr(original_ch)
    return decoded


def print_login_account():
    response = requests.get(f'https://{BASE_URL}')
    try:
        username = re.findall(r'uid=\'(.*?)\'', response.text)[0]
    except IndexError:
        username = 'N/A'
    print(f'Login account: {username}')


def get_config_path(args_: argparse.Namespace) -> pathlib.Path:
    if args_.config is not None:
        return pathlib.Path(args_.config)
    return pathlib.Path.home() / '.config' / 'nknet' / 'config.json'


def check_config(path: pathlib.Path) -> bool:
    if not path.exists():
        return False
    try:
        config = json.loads(path.read_text())
        if set(config.keys()) == {'username', 'password'}:
            return True
    except json.JSONDecodeError:
        return False
    return False


def login(args_: argparse.Namespace):
    def on_success(_):
        print('Login successful.')
        print_login_account()

    def on_error(msg: str):
        print(f'Login failed: {msg}')

    if connectivity_check(success=lambda _: True, error=lambda _: False):
        print('The campus network is already authenticated.')
        if input('Do you want to login again? (y/[n])? ').lower() != 'y':
            print('Aborted.')
            return

    config_path = get_config_path(args_)
    if check_config(config_path) and args_.auto_login:
        config = json.loads(config_path.read_text())
        username = decode_string(config['username'])
        password = decode_string(config['password'])
        remember_me = False
    else:
        username = input('Username: ').strip()
        password = getpass.getpass('Password: ').strip()
        remember_me = input('Save credentials? (y/[n])? ').lower() == 'y'

    print('Logging in...')
    response = requests.get(
        urllib.parse.urljoin(URL_ROOT, 'login'),
        params={
            'callback': encode_string(LOGIN_CALLBACK),
            'user_account': encode_string(f'{USERNAME_PREFIX}{username}'),
            'user_password': encode_string(password),
        },
    )

    time.sleep(TIMEOUT)
    connectivity_check(success=on_success, error=on_error, msg=response.text)
    if remember_me:
        config_path.parent.mkdir(parents=True, exist_ok=True)
        config_path.write_text(json.dumps({
            'username': encode_string(username),
            'password': encode_string(password),
        }))
        print('Login credentials saved at:', config_path)
        print('You can use the -a/--auto-login option to login automatically next time.')


def logout(_):
    def on_success(_):
        print('Logout successful.')

    def on_error(msg: str):
        print(f'Logout failed: {msg}')

    print('Logging out...')
    response = requests.get(urllib.parse.urljoin(URL_ROOT, 'logout'))
    time.sleep(TIMEOUT)
    connectivity_check(success=on_error, error=on_success, msg=response.text)


def status(_):
    def status_online(_):
        print(f'Status: {colorama.Fore.LIGHTGREEN_EX}online{colorama.Fore.RESET}')
        print_login_account()

    def status_offline(_):
        print(f'Status: {colorama.Fore.LIGHTRED_EX}offline{colorama.Fore.RESET}')

    print('Detecting network status...')
    connectivity_check(success=status_online, error=status_offline)


def clear(args_: argparse.Namespace):
    if check_config(get_config_path(args_)):
        if input('Are you sure you want to clear the saved login credentials? (y/[n])? ').lower() == 'y':
            get_config_path(args_).unlink(missing_ok=True)
            print('Credentials cleared.')
        else:
            print('Aborted.')
    else:
        print('No saved credentials found.')


if __name__ == '__main__':
    colorama.init()
    urllib3.util.connection.HAS_IPV6 = False
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    parser = argparse.ArgumentParser(description='a CLI tool for the Nankai University campus network')
    parser.add_argument(
        '-v', '--version',
        action='version',
        version=__version__,
    )
    parser.set_defaults(func=lambda _: parser.print_help())

    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument(
        '-c', '--config',
        required=False,
        type=str,
        help='path to the config file containing login credentials',
    )
    subparsers = parser.add_subparsers(dest='command', title='commands')

    login_parser = subparsers.add_parser(
        'login',
        help='login to the campus network',
        parents=[parent_parser],
    )
    login_parser.add_argument(
        '-a', '--auto-login',
        required=False,
        action='store_true',
        help='automatically login using the credentials from the config file (if available)',
    )
    login_parser.set_defaults(func=login)

    logout_parser = subparsers.add_parser(
        'logout',
        help='logout from the campus network',
    )
    logout_parser.set_defaults(func=logout)

    status_parser = subparsers.add_parser(
        'status',
        help='check the status of the campus network',
    )
    status_parser.set_defaults(func=status)

    clear_parser = subparsers.add_parser(
        'clear',
        help='clear the saved login credentials',
        parents=[parent_parser],
    )
    clear_parser.set_defaults(func=clear)

    args = parser.parse_args()
    args.func(args)
